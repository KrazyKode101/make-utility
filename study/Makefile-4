CC = g++
OPTIONS = -O2 -g -Wall -ansi -Werror 
INCLUDES += -I/home/$(USER)/headers/ -I.

DUMPDIR = /home/$(USER)/learn_make/dumps
SRCDIR = /home/$(USER)/learn_make/src/

PATHFROMSRC = $(subst $(SRCDIR),,$(CURDIR))

OBJDIR = $(DUMPDIR)/$(PATHFROMSRC)/objs
LIBDIR = $(DUMPDIR)/$(PATHFROMSRC)/libs
EXECDIR = $(DUMPDIR)/$(PATHFROMSRC)/exec
LDFLAGS += -L$(LIBDIR)

OBJS = $(subst .cpp,.o,$(CPP_SOURCES)) 
OBJNAMES = $(patsubst %,$(OBJDIR)/%,$(OBJS))

.PHONY = all clean

CPP_SOURCES = hello.cpp factorial.cpp
SUBDIRS = simple
LIB = util
BIN = hello

LIBNAME = $(LIBDIR)/lib$(LIB).a

ifeq($(BIN),)
	all: subdirs
else
	all : subdirs $(EXECDIR)/$(BIN)
endif

subdirs :
	$(foreach subdir,$(SUBDIRS),cd $(subdir) && $(MAKE))

$(EXECDIR)/$(BIN) : $(LIBNAME) 
	@echo "target: " $@ "dependencies: " $^
	$(CC) $(OPTIONS) $(INCLUDES) $(LDFLAGS) main.cpp -l$(LIB) -o $@

$(LIBNAME) : $(OBJNAMES)
	@echo "target: " $@  "dependencies:" $^
	ar rvs $@ $? 

.SECONDEXPANSION:
%.o : $$(subst .o,.cpp,$$(notdir $$@))
	@echo "target: " $@  "dependencies:" $^
	$(CC) $(OPTIONS) $(INCLUDES) -c $^ -o $@

list :
	@echo $(shell ls)

clean:
	@echo "Cleaning up"
	rm -f $(LIBNAME)
	$(foreach obj,$(OBJNAMES),rm -f obj)
